
// –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –∑–∞–¥–∞—á
async function loadPracticeManifest() {
    const response = await fetch('practice-manifest.json');
    if (!response.ok) throw new Error('Failed to load practice manifest');
    return await response.json();
}

async function initPractice() {
    const container = document.getElementById('problems-container');
    const categories = await loadPracticeManifest();
    for (let category of categories) {
        const categorySection = await renderCategory(category);
        container.appendChild(categorySection);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ Markdown-—Ñ–∞–π–ª–∞
async function loadMarkdownFile(url) {
    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${url}`);
        return await response.text();
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
        return `‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${url}`;
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ Markdown: –∏—â–µ–º ## –£—Å–ª–æ–≤–∏–µ –∏ ## –†–µ—à–µ–Ω–∏–µ
function parseProblem(mdContent) {
    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const sections = mdContent.split(/^##\s+/m).slice(1); // –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –¥–æ –ø–µ—Ä–≤–æ–≥–æ ##
    
    let condition = "", solution = "";

    for (let section of sections) {
        const lines = section.split('\n');
        const title = lines[0].trim();
        const content = lines.slice(1).join('\n').trim();

        if (title === "–£—Å–ª–æ–≤–∏–µ") {
            condition = content;
        } else if (title === "–†–µ—à–µ–Ω–∏–µ") {
            solution = content;
        }
    }

    return { condition, solution };
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏ —Å –¥–≤–æ–π–Ω—ã–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º
function renderProblem(container, problemTitle, condition, solution) {
    const problemBlock = document.createElement('div');
    problemBlock.className = 'qa-block';

    // –£—Ä–æ–≤–µ–Ω—å 1: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const titleDiv = document.createElement('div');
    titleDiv.className = 'question';
    titleDiv.textContent = problemTitle;
    titleDiv.style.cursor = 'pointer';
    titleDiv.onclick = function() {
        const conditionDiv = this.nextElementSibling;
        conditionDiv.classList.toggle('show');
        this.classList.toggle('open');
    };

    // –£—Ä–æ–≤–µ–Ω—å 2: –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ)
    const conditionDiv = document.createElement('div');
    conditionDiv.className = 'answer';
    conditionDiv.innerHTML = marked.parse(condition);

    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ" –≤–Ω—É—Ç—Ä–∏ —É—Å–ª–æ–≤–∏—è
    const showSolutionBtn = document.createElement('button');
    showSolutionBtn.textContent = "üëÄ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ";
    showSolutionBtn.className = 'theme-toggle'; // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
    showSolutionBtn.style.marginTop = '15px';
    showSolutionBtn.style.width = 'auto';
    showSolutionBtn.style.padding = '8px 16px';

    const solutionDiv = document.createElement('div');
    solutionDiv.className = 'answer';
    solutionDiv.style.display = 'none';
    solutionDiv.innerHTML = marked.parse(solution);

    showSolutionBtn.onclick = function(e) {
        e.stopPropagation(); // –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —É—Å–ª–æ–≤–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ
        solutionDiv.style.display = solutionDiv.style.display === 'none' ? 'block' : 'none';
        this.textContent = solutionDiv.style.display === 'none' ? "üëÄ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ" : "üôà –°–∫—Ä—ã—Ç—å —Ä–µ—à–µ–Ω–∏–µ";
    };

    conditionDiv.appendChild(showSolutionBtn);
    conditionDiv.appendChild(solutionDiv);

    problemBlock.appendChild(titleDiv);
    problemBlock.appendChild(conditionDiv);
    container.appendChild(problemBlock);
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function renderCategory(category) {
    const categorySection = document.createElement('div');
    categorySection.className = 'topic-section';

    const categoryTitle = document.createElement('h2');
    categoryTitle.className = 'topic-title';
    categoryTitle.textContent = category.name;
    categorySection.appendChild(categoryTitle);

    for (let file of category.files) {
        const url = `${category.path}/${file}`;
        const mdContent = await loadMarkdownFile(url);
        const { condition, solution } = parseProblem(mdContent);
        const problemTitle = file.replace(/\.md$/, '').replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
        renderProblem(categorySection, problemTitle, condition, solution);
    }

    return categorySection;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∞–∫—Ç–∏–∫–∏
async function initPractice() {
    const container = document.getElementById('problems-container');
    const categories = await loadPracticeManifest();
    for (let category of categories) {
        const categorySection = await renderCategory(category);
        container.appendChild(categorySection);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
if (document.getElementById('problems-container')) {
    document.addEventListener('DOMContentLoaded', initPractice);
}
